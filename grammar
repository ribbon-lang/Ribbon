Name = identifier | operator | "`" (identifier | operator) "`"

TypeHead = listSome<identifier (":" Kind)?> ("where" listSome<Type>)?

PartialFixity = "infix" | "prefix" | "postfix" | "atom"
ExactFixity
    = ("infixl" | "infixr" | "infix" | "prefix" | "postfix") sInt?
    | "atom"

Field body = Label body where
    Label = uInt ("\\" Name)? | Name

Path
    = PlainBase ("/" Component++"/")?
    | SlashBase Component**"/"
    | Component++"/" where
    PlainBase = "module" Name | "file" string
    SlashBase = "/" | "./" | "../"+
    Component
        = "namespace" Name
        | ("type" | "value" | "class") PartialFixity? Name
        | PartialFixity? Name

PathExt tail
    = Path.PlainBase ("/" Path.Component++"/")? "/" tail
    | Path.SlashBase (Path.Component++"/" "/" tail | tail)
    | Path.Component++"/" "/" tail
    | tail

WsList sep elem = wsBlock<elem> | wsBlock<SepList> | SepList where
    SepList = elem (sep elem)*



Module = ModuleHead Doc

ModuleHead = "module" string wsBlock<Meta> where
    Meta
        = "version" Version
        | "sources" WsList<",", string>
        | "dependencies" WsList<",", Dependency>
        | identifier WsList<",", string>
    Dependency = string "@" Version ("as" Name)?
    Version = uInt "." uInt "." uInt if $1 > 0 or $2 > 0 or $3 > 0

Doc = Def*

Def = Visibility? (Use | Instance | Namespace | TypeDef | ValueDef) where
    DefName = ExactFixity? Name
    Use = "use" UseTree where
        UseTree = PathExt<"{" UseBranch "}" | "*"> ("as" Name)?
        UseBranch = UseTree**","

    Instance
        = "instance" TypeHead? "for" Type "=>" WsList<",", InstanceDef>
        where InstanceDef
            = Name "=" wsBlock<Expr>
            | DefName "=" "type" (TypeHead "=>"?) Type

    Namespace = Name "=" "namespace" wsBlock<Doc>

    TypeDef = DefName "=" TypeBody where
        Dec = Name ":" wsBlock<Type>
        ClassDec
            = DefName ":" ("forall" TypeHead "=>")? Type
            | DefName ":" "type" TypeHead?
            | Name ":" "value" wsBlock<Type>
        TypeBody
            = "type" (TypeHead "=>")? wsBlock<Type>
            | "struct" (TypeHead "=>")? WsList<",", Dec>
            | "union" (TypeHead "=>")? WsList<",", Dec>
            | "effect" (TypeHead "=>")? WsList<",", Dec>
            | "class" (TypeHead "=>")? WsList<",", ClassDec>

    ValueDef = DefName ValueBody where
        ValueBody = ValueType? ValueExpr | ValueType
        ValueType = ":" ("forall" TypeHead)? wsBlock<Type>
        ValueExpr = "=" wsBlock<Expr>

Kind
    = "type" | "effect"
    | "layout" | "name"
    | "data" | "effects"
    | "class"
    | Kind "->" Kind
    | "(" Kind ")"

Type |=
    Var = identifier
    Free = "_"
    Con = Path
    Unit = "(" ")"
    Group = "(" Type ")"
    Tuple = "(" Type "," Type**"," ")"
    DataRow = "{" WsList<",", Field<":" Type>> "}"
    EffectRow = "[" WsList<",", Type> "]"
    App = Type Type
    QuantifiedInline = "'" identifier ("of" Kind)?
    Constraint |=
        IsStruct = "struct" Type ("as" Type)?
        IsUnion = "union" Type ("as" Type)?
        HasClass = Type? "with" Type
        HasAssoc = Type? "has" (Name ("~" Type)? | "type" Name)
        RowSub = Type "<" Type?
        RowCat = Type "<>" Type ("~" Type)?
        Equality = Type "~" Type
    User |=
        Infix = Type Path Type
        Prefix = Path Type
        Postfix = Type Path

Expr |=
    Var = identifier
    Literal = literal
    Global = Path
    Unit = "(" ")"
    Group = "(" Expr ")"
    Tuple = "(" Expr "," Expr**"," ")"
    Struct = "{" WsList<",", Field<"=" Block>> "}"
    AnyUnion = "+/" Name
    Select = Expr "." Name
    App = Expr Block
    Ann = Expr ":" wsBlock<Type>
    Function = "fun" listSome<Patt> "=>" Block
    Match = "match" Expr wsBlock<Case+>
        where Case = ("|" Patt)+ "=>" Block
    Let = "let" listSome<Patt "=" Block>
    Continue = "continue" Block
    Return = "return" Block
    Sequence = Expr ";" Expr
    Handler = "with" Type "handler" wsBlock<Case+> "do" Block
        where Case
            = Name "|" listSome<Patt> "=>" Block
            | "return" Patt "=>" Block
    User |=
        Infix = Expr Path Expr
        Prefix = Path Expr
        Postfix = Expr Path
    where Block = WsList<";", Expr>

Patt |=
    Var = identifier
    Literal = literal
    Unit = "(" ")"
    Group = "(" Patt ")"
    Tuple = "(" Patt "," Patt**"," ")"
    Struct = "{" WsList<",", Field<"=" WsBlock<Patt>>> ".."? "}"
    AnyUnion = "+/" Name Patt?
    App = Path Patt?
    Alias = Patt "as" identifier
    Ann = Patt ":" Type
